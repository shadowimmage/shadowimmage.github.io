<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Chase Sawyer</title>
    <link>https://chasesawyer.dev/tags/python/</link>
    <description>Recent content in python on Chase Sawyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>shadowimmage@gmail.com (Chase Sawyer)</managingEditor>
    <webMaster>shadowimmage@gmail.com (Chase Sawyer)</webMaster>
    <lastBuildDate>Tue, 03 Mar 2020 18:43:27 -0800</lastBuildDate>
    
	<atom:link href="https://chasesawyer.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django API Apps on Windows IIS</title>
      <link>https://chasesawyer.dev/post/2020/03/django-api-apps-on-windows-iis/</link>
      <pubDate>Tue, 03 Mar 2020 18:43:27 -0800</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/post/2020/03/django-api-apps-on-windows-iis/</guid>
      <description>&lt;p&gt;This is a guide on setting up Python/Django apps to run on a Windows server using IIS as the webserver. I&#39;ll go over the specifics below. We&#39;re starting things off with the following assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows Server is installed somewhere and running with a static IP and domain name all set.&lt;/li&gt;
&lt;li&gt;Server SSL Certificate has already been provisioned and set up. (Optional but extremely recommended to run HTTPS)&lt;/li&gt;
&lt;li&gt;(not specifically necessary) any SSO setup/shibboleth stuff has already been set up. (This is if you want to leverage SSO login, etc.)&lt;/li&gt;
&lt;li&gt;Everything is running 64-bit architecture.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Docker Infrastructure Project</title>
      <link>https://chasesawyer.dev/post/2019/05/docker-infrastructure-project/</link>
      <pubDate>Mon, 20 May 2019 10:41:23 -0700</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/post/2019/05/docker-infrastructure-project/</guid>
      <description>I&#39;m building a web infrastructure project that&#39;s based around the project verbose-equals-true (referred to as VET from now on), which sets out to create a set of services to support modern web apps, using several Docker based images to collect everything into separate concerns. I like the philosophy behind the project, and it looks well thought out, however, as things are always changing in this landscape and nobody has the same development environment, there&#39;s always going to be stumbling blocks.</description>
    </item>
    
    <item>
      <title>Maintaining Older Django and Python Projects</title>
      <link>https://chasesawyer.dev/post/2019/02/maintaining-older-django-and-python-projects/</link>
      <pubDate>Thu, 21 Feb 2019 09:26:35 -0800</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/post/2019/02/maintaining-older-django-and-python-projects/</guid>
      <description>I have been working on the backend for a project that I&#39;ve written about {{previously&amp;ndash;link}}. The established tools server that will be supporting my new React frontend app(s) will be using a backend built on Python 2.7 and Django 1.11, and thus I&#39;ve had to remember how to get a development environment set up that will appropriately support the project running locally on my machine. I have a personal site that runs on the same version of Django, but with Python 3.</description>
    </item>
    
    <item>
      <title>RTTApp</title>
      <link>https://chasesawyer.dev/project/rttapp/</link>
      <pubDate>Wed, 30 May 2018 10:06:45 -0700</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/project/rttapp/</guid>
      <description>Repair Task Tracker RTT is a full stack app that addresses the needs of a computer hardware management process, allowing the tracking and resolution of issues/problems with the hardware, as well as the configuration and components of each major hardware item. RTT is meant to be a back-of-house tool, replacing paper tickets and spreadsheets. The goal of this project was to implement a GraphQL app, with useful data, allowing a seamless user experience as they operate through the app, and data is downloaded and uploaded in the background.</description>
    </item>
    
    <item>
      <title>KeysApp</title>
      <link>https://chasesawyer.dev/project/keysapp/</link>
      <pubDate>Wed, 30 May 2018 10:01:41 -0700</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/project/keysapp/</guid>
      <description>The Keys App was my first major project that sought to solve a problem with managing key checkouts without requiring a cumbersome customer database / sign up form. This would target an institution that mostly catered to internal customers, such as a university&#39;s AV department and it&#39;s instructors. It largely replicates a paper-form-based system, with an added layer of data validation and control (emails, phone numbers must be in a valid format; keys can only be returned by their original owners; keys can&#39;t be checked out twice; etc.</description>
    </item>
    
    <item>
      <title>Python Tk UI Notes, Project Update</title>
      <link>https://chasesawyer.dev/post/2017/06/python-tk-ui-notes-project-update/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
      <author>shadowimmage@gmail.com (Chase Sawyer)</author>
      <guid>https://chasesawyer.dev/post/2017/06/python-tk-ui-notes-project-update/</guid>
      <description>I&#39;ve been making a lot of progress on the python-LEDSerialController project. There&#39;s been a lot to learn about how to run the original command line script with a GUI frontend. I chose to use Tk since it&#39;s baked into Python already, and there&#39;s nothing to configure to get it working. It doesn&#39;t look nearly as nice as something that would come out of using a more advanced UI toolkit, but it&#39;s also had a lower bar to entry, despite some drawbacks with Tk&#39;s documentation.</description>
    </item>
    
  </channel>
</rss>